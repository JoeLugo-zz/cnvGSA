cnv2.df <- cnv.df
cnv2.df$SubjCnvKey <- with (cnv2.df, paste (SID, CnvKey, sep = paste(params.ls$keySep,params.ls$keySep,sep = "")))
cnv2.df <- cnv2.df[! duplicated (cnv2.df$SubjCnvKey), ]
cnv2gene.ls <- strsplit (cnv2.df$geneID, params.ls$geneSep)
names (cnv2gene.ls) <- cnv2.df$SubjCnvKey
cnv2gene.df <- stack (cnv2gene.ls); names (cnv2gene.df) <- c ("geneID", "SubjCnvKey")
cnv2gene.df <- merge (cnv2gene.df, cnv2.df[, c ("SubjCnvKey", "CnvKey", "TYPE")], by = "SubjCnvKey", all = T)
cnv2gene.df <- subset (cnv2gene.df, subset = ! is.na (geneID))
cnv2gene.df$geneID_type <- with (cnv2gene.df, paste (geneID, TYPE, sep = params.ls$keySep))
kl_gene.df$geneID_type  <- with (kl_gene.df,  paste (geneID,   TYPE, sep = params.ls$keySep))
# any CNV that has this gene will me marked
kg.cnvkey <- subset (cnv2gene.df, subset = geneID_type %in% kl_gene.df$geneID_type, select = CnvKey, drop = T)
cnv.df$OlpKL_CNV[which (cnv.df$CnvKey %in% kg.cnvkey)] <- 1
# 3.4.2. Mark subjects
klg.sid <- subset (cnv.df, subset = OlpKL_CNV == 1, select = SID, drop = T)
cnv.df$OlpKL_SID <- 0
cnv.df$OlpKL_SID[which (cnv.df$SID %in% klg.sid)] <- 1
# 3.5. phenotype table
ph.df <- merge (ph.df, subset(cnv.df, select = c(SID,OlpKL_SID)),by = "SID")
if(nlevels(as.factor(ph.df$SEX)) >= 20){
warning("There are more than 20 levels in the SEX factor")
}
if(nlevels(as.factor(ph.df$CNV_platform)) >= 20){
warning("There are more than 20 levels in the CNV_platform factor")
}
ph.df <- ph.df[! duplicated (ph.df), ]
cnv.df$SubjCnvKey <- with (cnv.df, paste (SID, CnvKey, sep = paste(params.ls$keySep, params.ls$keySep, sep = "")))
# 3.6. main table
check_type <- params.ls$cnvType
type.vc    <- unique(cnv.df$TYPE)
if (params.ls$cnvType == "ALL" || params.ls$cnvType == ""){
check_type <- type.vc
}
cnv.df <- cnv.df[! duplicated (cnv.df$SubjCnvKey), ]
cnv2gene.ls <- strsplit (cnv.df$geneID, split = params.ls$geneSep)
names (cnv2gene.ls) <- cnv.df$SubjCnvKey
cnv2gene.df <- stack (cnv2gene.ls); names (cnv2gene.df) <- c ("geneID", "SubjCnvKey") # sets colnames
cnv2gene.df <- merge (cnv2gene.df, cnv.df[, unlist(c(params.ls$covariates, c ("CHR","BP1","BP2","SubjCnvKey", "SID", "TYPE")))], by = "SubjCnvKey", all = T)
cnv2gene.df$geneID_TYPE  <- cnv2gene.df$geneID
if (params.ls$cnvType != "ALL"){
cnv2gene.df$geneID_TYPE <- cnv2gene.df$geneID; cnv2gene.df$geneID_TYPE[which (cnv2gene.df$TYPE != check_type)] <- NA
}
# spiltting up data for only loss or only gain
cnv2gene_TYPE.df <- subset (cnv2gene.df, select = c (SID, geneID_TYPE, SubjCnvKey))
# making list of gene sets into data frame
gs_sel_U.df <- stack (gs_sel_U.ls); names (gs_sel_U.df) <- c ("gID", "GsKey")
gs_sel_U.df <- merge (gs_sel_U.df,subset(gs_info.df,select = c(GsKey,GsID,GsName)),by="GsKey")
sid2gs_TYPE.df <- merge (cnv2gene_TYPE.df, gs_sel_U.df, by.x = "geneID_TYPE", by.y = "gID", all.x = T, all.y = F)
# this is what counts the events for each gene set
sid2gs_TYPE.tab <- table (sid2gs_TYPE.df[, c ("SID", "GsKey")])
gs_colnames_TYPE.chv <- colnames (sid2gs_TYPE.tab)[which (apply (sid2gs_TYPE.tab > 0, 2, sum) >= 5)]
geneID.df <- read.table (config.ls$geneIDFile, header = T, sep = "\t", quote = "\"", stringsAsFactors = F)
cnv_shr.df  <- subset(cnv.df,select = c("SID","Condition","TYPE","SubjCnvKey"))
sid_shr.df  <- subset(sid2gs_TYPE.df,select = c(SID,GsKey))
gene2sid.df <- merge(sid_shr.df,cnv_shr.df)
gene2sid.df <- merge(subset(gene2sid.df,select = -c(GsKey)),subset(cnv2gene.df,select=c(SubjCnvKey,geneID)),by="SubjCnvKey")
gene2sid.df <- gene2sid.df[which(!(is.na(gene2sid.df$geneID))),]
gene2sid.df <- gene2sid.df[! duplicated (gene2sid.df), ]
geneCount.tab <- table(gene2sid.df[,c("geneID","Condition")])
geneCount.df  <- as.data.frame.matrix(geneCount.tab); colnames(geneCount.df) <- c("Controls","Cases"); geneCount.df$geneID <- rownames(geneCount.df); row.names(geneCount.df) <- NULL;
geneCount.df  <- merge(geneCount.df,subset(geneID.df,select = -c(Symbol)),by.x="geneID",by.y="geneID"); geneCount.df <- geneCount.df[,c(1,4,2,3)];
View(geneCount.df)
gene2sid.df <- cSplit(cnv.df ,splitCols = "geneID", sep = ";", direction = "long")
# Applying Thresholds - Gene Count Table
geneCount.tab <- table(gene2sid.df[,c("geneID","Condition")])
geneCount2.df  <- as.data.frame.matrix(geneCount.tab); colnames(geneCount2.df) <- c("Controls","Cases"); geneCount2.df$geneID <- rownames(geneCount2.df); row.names(geneCount2.df) <- NULL;
geneCount2.df  <- merge(geneCount2.df,subset(geneID.df,select = -c(Symbol)),by.x="geneID",by.y="geneID"); geneCount2.df <- geneCount2.df[,c(1,4,2,3)];
gene2sid.df <- cSplit(cnv.df ,splitCols = "geneID", sep = ";", direction = "long")
geneCount2.tab <- table(gene2sid.df[,c("geneID","Condition")])
cnv_shr.df  <- subset(cnv.df,select = c("SID","Condition","TYPE","SubjCnvKey"))
sid_shr.df  <- subset(sid2gs_TYPE.df,select = c(SID,GsKey))
gene2sid.df <- merge(sid_shr.df,cnv_shr.df)
gene2sid.df <- merge(subset(gene2sid.df,select = -c(GsKey)),subset(cnv2gene.df,select=c(SubjCnvKey,geneID)),by="SubjCnvKey")
gene2sid.df <- gene2sid.df[which(!(is.na(gene2sid.df$geneID))),]
gene2sid.df <- gene2sid.df[! duplicated (gene2sid.df), ]
geneCount.tab <- table(gene2sid.df$geneID,gene2sid.df$Condition)
geneCount.df  <- as.data.frame.matrix(geneCount.tab); colnames(geneCount.df) <- c("Controls","Cases"); geneCount.df$geneID <- rownames(geneCount.df); row.names(geneCount.df) <- NULL;
geneCount.df  <- merge(geneCount.df,subset(geneID.df,select = -c(Symbol)),by.x="geneID",by.y="geneID"); geneCount.df <- geneCount.df[,c(1,4,2,3)];
View(geneCount.df)
gene2sid.df <- cSplit(cnv.df ,splitCols = "geneID", sep = ";", direction = "long")
geneCount2.tab <- table(gene2sid.df$geneID,gene2sid.df$Condition)
geneCount2.df  <- as.data.frame.matrix(geneCount2.tab); colnames(geneCount2.df) <- c("Controls","Cases"); geneCount2.df$geneID <- rownames(geneCount2.df); row.names(geneCount2.df) <- NULL;
geneCount2.df  <- merge(geneCount2.df,subset(geneID.df,select = -c(Symbol)),by.x="geneID",by.y="geneID"); geneCount2.df <- geneCount2.df[,c(1,4,2,3)];
View(geneCount2.df)
remove.packages("cnvGSA")
library(devtools)
install("../../Desktop//cnvGSA")
cnvGSA.in <- CnvGSAInput()
cnvGSA.in <- cnvGSAIn(configFile = "/Users/josephlugo/Documents/R/PGC2_test/R_Works/PGC2_config.txt",cnvGSA.in)
library(BiocCheck)
BiocCheck("../../Desktop//cnvGSA")
library(cnvGSA)
load("~/Desktop/Data/cnvGSAdata/data/cnvGSA_input_example.RData")
load("~/Desktop/Data/cnvGSAdata/data/cnvGSA_output_example.RData")
cnv2gene.df <- cnvGSA.in@cnvData.ls$cnv2gene.df # as.data.frame(master.ls[5])
gs_sel_U.df <- cnvGSA.in@gsData.ls$gs_sel_U.df # as.data.frame(master.ls[6])
View(cnv2gene.df)
View(gs_sel_U.df)
cnv.df <- cnvGSA.in@cnvData.ls$cnv.df
View(cnv.df)
View(cnv2gene.df)
gsTable_TYPE.df <- merge (cnv.df, subset(gs_sel_U.df,select=-c(GsKey)), by.x = "geneID", by.y = "gID", all.x = T, all.y = F)
View(gsTable_TYPE.df)
gsTables.ls     <- split(gsTable_TYPE.df,gsTable_TYPE.df$GsID)
View(gsTables.ls$BspanHM_lg2rpkm3.21)
cnv.df$geneID_TYPE <- cnv.df$geneID; cnv.df$geneID_TYPE[which (cnv.df$TYPE != check_type)] <- NA
check_type <- cnvGSA.in@params.ls$check_type
cnv.df$geneID_TYPE <- cnv.df$geneID; cnv.df$geneID_TYPE[which (cnv.df$TYPE != check_type)] <- NA
gsTable_TYPE.df <- merge (cnv.df, subset(gs_sel_U.df,select=-c(GsKey)), by.x = "geneID_TYPE", by.y = "gID", all.x = T, all.y = F)
gsTables.ls     <- split(gsTable_TYPE.df,gsTable_TYPE.df$GsID)
View(gsTables.ls$BspanHM_lg2rpkm3.21)
View(gsTable_TYPE.df)
NA %in% gsTable_TYPE.df$geneID_TYPE
View(gsTables.ls$U)
t <- Sys.time()
timestamp <- strftime(t,"%Y%m%d%Hh%Mm%S")
config.df <- cnvGSA.in@config.ls$config.df
cnvType         <- config.df[config.df$param == "cnvType","value"]
pVal            <- config.df[config.df$param == "pVal","value"]
FDR             <- config.df[config.df$param == "FDR","value"]
coeff           <- config.df[config.df$param == "coeff","value"]
keepCoeff       <- config.df[config.df$param == "keepCoeff","value"]
outputPathEnr   <- config.df[config.df$param == "outputPathEnr","value"]
filtGsEnr       <- config.df[config.df$param == "filtGsEnr","value"]
minCaseCount    <- as.numeric(config.df[config.df$param == "minCaseCount","value"])
minControlCount <- as.numeric(config.df[config.df$param == "minControlCount","value"])
minRatio        <- as.numeric(config.df[config.df$param == "minRatio","value"])
geneCount.tab <- cnvGSA.out@gsData.ls$geneCount.tab
res.ls        <- cnvGSA.out@res.ls
if (pVal == "")             {pVal <- "Pvalue_U_dev"}
if (FDR == "")              {FDR <- "FDR_BH_U"}
if (coeff == "")            {coeff <- "Coeff_U"}
if (keepCoeff == "")        {keepCoeff <- "YES"}
if (filtGsEnr == "")        {filtGsEnr <- "NO"}
if (is.na(minCaseCount))    {minCaseCount <- 0}
if (is.na(minControlCount)) {minControlCount <- 0}
if (is.na(minRatio))        {minRatio <- 0}
# MAKING GENERIC FILE
resKL <- get(paste("covAll_chipAll_",cnvType,"_KLy.df",sep=""),res.ls)
if (Kl == "NO"){resKL <- get(paste("covAll_chipAll_",cnvType,"_KLn.df",sep=""),res.ls)}
resKL$Phenotype <- -1
resKL[which(resKL[,coeff] > 0),]$Phenotype <- 1
if (keepCoeff == "NO")
{
resKL <- resKL[which(resKL$Phenotype == 1),]
}
enrGeneric      <- subset(resKL,select = c("GsID","GsName",pVal,FDR,"Phenotype"))
enrGeneric$GsID <- as.factor(enrGeneric$GsID); enrGeneric$GsName <- as.factor(enrGeneric$GsName);
# MAKING GMT FILE
gs.ls       <- cnvGSA.out@gsData.ls$gs.ls
gs_info.df  <- cnvGSA.out@gsData.ls$gs_info.df
gs_info.df <- gs_info.df[order(gs_info.df$GsKey),]
gs.ls      <- gs.ls[order(names(gs.ls))]
lis        <- lapply(1:length(gs.ls),function(x) gs.ls[[x]])
gsGenes.ls <- lis
usrFilt.df    <- geneCount.tab[which(geneCount.tab[,"1"] >= minCaseCount),]
usrFilt.df    <- usrFilt.df[which(usrFilt.df[,"0"] >= minControlCount),]
usrFilt.df    <- usrFilt.df[which(usrFilt.df[,"1"]/usrFilt.df[,"0"] >= minRatio),]
filt.vc       <- rownames(usrFilt.df) # blacklist for genes to filter out
View(usrFilt.df)
gsGenes.ls    <- lapply(gs.ls,setdiff,filt.vc)
names(gsGenes.ls) <- gs_info.df$GsID
res <- cnvGSA.out@res.ls$covAll_chipAll_1_KLy.df
gs.ls <- cnvGSA.in@gsData.ls$gs.ls
library (org.Hs.eg.db)
ann_eg2sy.df   <- stack (as.list (org.Hs.egSYMBOL));
names (ann_eg2sy.df)   <- c ("Symbol", "geneID");
ann_eg2sy.df   <- as.data.frame (lapply (ann_eg2sy.df,   as.character), stringsAsFactors = F)
ann_eg2name.df <- stack (as.list (org.Hs.egGENENAME));
names (ann_eg2name.df) <- c ("Name",   "geneID");
ann_eg2name.df <- as.data.frame (lapply (ann_eg2name.df, as.character), stringsAsFactors = F)
geneID.df <- merge (ann_eg2sy.df, ann_eg2name.df, by = "geneID", all = T)
h <- cnv.df[2,5]
h <- cnv.df[2,6]
h <- cnv.df[5,6]
h <- strsplit(cnv.df[5,6],";")
h[1]
h <- unlist(strsplit(cnv.df[5,6],";"))
View(geneID.df)
geneID.df[which(geneID.df$geneID == "168374"),]$Symbol
geneID.df[which(geneID.df$geneID %in% h),]$Symbol
l <- geneID.df[which(geneID.df$geneID %in% h),]$Symbol
paste(l,sep=";")
paste(l,collapse=";")
h <- unlist(strsplit(cnv.df$geneID,";"))
h <- strsplit(cnv.df$geneID,";")
geneID.df[which(geneID.df$geneID %in% h[1]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[2]),]$Symbol
j <- apply(h,fucntion(x) geneID.df[which(geneID.df$geneID %in% h[x]),]$Symbol)
j <- lapply(h,fucntion(x) geneID.df[which(geneID.df$geneID %in% h[x]),]$Symbol)
j <- lapply(h,fucntion(x) geneID.df[which(geneID.df$geneID %in% h[x]),]$Symbol)
j <- lapply(h,function(x) geneID.df[which(geneID.df$geneID %in% h[x]),]$Symbol)
geneID.df[which(geneID.df$geneID %in% h[2]),]$Symbol
unique(j)
j <- lapply(h,function(x) geneID.df[which(geneID.df$geneID %in% h[[x]]),]$Symbol)
geneID.df[which(geneID.df$geneID %in% h[2]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[4]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[5]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[7]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[8]),]$Symbol
h[8]
h[[8]]
geneID.df[which(geneID.df$geneID %in% h[[2]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[[2]]),]$Symbol
j <- lapply(h,function(x) geneID.df[which(geneID.df$geneID %in% h[[x]]),]$Symbol)
geneID.df[which(geneID.df$geneID %in% h[[1]]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[[2]]),]$Symbol
geneID.df[which(geneID.df$geneID %in% h[[9]]),]$Symbol
paste(geneID.df[which(geneID.df$geneID %in% h[[9]]),]$Symbol,collapse=";")
j <- lapply(h,function(x) paste(geneID.df[which(geneID.df$geneID %in% h[[x]]),]$Symbol,collapse=";"))
j <- aapply(h,function(x) paste(geneID.df[which(geneID.df$geneID %in% h[[x]]),]$Symbol,collapse=";"))
j <- apply(h,function(x) paste(geneID.df[which(geneID.df$geneID %in% h[[x]]),]$Symbol,collapse=";"))
j <- sapply(h,function(x) paste(geneID.df[which(geneID.df$geneID %in% h[[x]]),]$Symbol,collapse=";"))
j <- sapply(h,function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
j <- lapply(h,function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
unique(j)
geneID.df[which(geneID.df$geneID %in% unlist(h[9])),]$Symbol
j <- lapply(h,function(x) unlist(h[x]))
j <- lapply(h,function(x) h[x])
h[2]
unlist(h[2])
j <- lapply(l <- 1:length(h)),function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
l <- 1:length(h)
j <- lapply(l,function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
cnv.df$Symbol <- j
View(cnv.df)
h <- strsplit(cnv.df$geneID,";")
h[1]
h[2\]
h[2]
h2 <- strsplit(cnv.df$geneID_TYPE,";")
l2 <- 1:length(h)
j2 <- lapply(l <- 1:length(h)),function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
h2 <- strsplit(cnv.df$geneID_TYPE,";")
l2 <- 1:length(h2)
j2 <- lapply(l <- 1:length(h)),function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
h2 <- strsplit(cnv.df$geneID_TYPE,";")
l2 <- 1:length(h2)
j2 <- lapply(l,function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h[x])),]$Symbol,collapse=";"))
cnv.df$Symbol_TYPE <- j2
View(cnv.df)
h2 <- strsplit(cnv.df$geneID_TYPE,";")
l2 <- 1:length(h2)
j2 <- lapply(l,function(x) paste(geneID.df[which(geneID.df$geneID %in% unlist(h2[x])),]$Symbol,collapse=";"))
cnv.df$Symbol_TYPE <- j2
View(cnv.df)
gs_sel_U.df <- cnvGSA.in@gsData.ls$gs_sel_U.df # as.data.frame(master.ls[6])
gsTable_TYPE.df <- merge (cnv.df, subset(gs_sel_U.df,select=-c(GsKey)), by.x = "geneID_TYPE", by.y = "gID", all.x = T, all.y = F)
View(gsTable_TYPE.df)
gsTable_TYPE.df <- merge (cnv.df, subset(gs_sel_U.df,select=-c(GsKey)), by.x = "geneID_TYPE", by.y = "gID")
gsTable_TYPE.df <- merge (cnv.df, subset(gs_sel_U.df,select=-c(GsKey)), by.x = "geneID_TYPE", by.y = "gID", all.x = T, all.y = F)
View(gsTable_TYPE.df)
gsTables.ls     <- split(gsTable_TYPE.df,gsTable_TYPE.df$GsID)
library(cnvGSA)
library(devtools)
install("../../Desktop//cnvGSA")
library(BiocCheck)
BiocCheck("../../Desktop//cnvGSA")
library(devtools)
check("../../Desktop//cnvGSA")
## --------------
## CnvGSAInput S4
## --------------
setClass( "CnvGSAInput",
representation(
config.ls = "list",
params.ls = "list",
cnvData.ls = "list",
phData.ls = "list",
gsData.ls = "list",
geneID.ls = "list"
)
)
# CnvGSAInput constructor
CnvGSAInput <- function(
config.ls = list(),
params.ls = list(),
cnvData.ls = list(),
phData.ls = list(),
gsData.ls = list(),
geneID.ls = list()
)
{
new( "CnvGSAInput", config.ls = config.ls, params.ls = params.ls, cnvData.ls = cnvData.ls, phData.ls = phData.ls, gsData.ls = gsData.ls, geneID.ls = geneID.ls )
}
# CnvGSAInput accessors
setGeneric( "config.ls", function(obj) standardGeneric("config.ls") )
setGeneric( "config.ls<-", function(obj, value) standardGeneric("config.ls<-") )
setMethod( "config.ls", "CnvGSAInput", function(obj){ obj@config.ls } )
setReplaceMethod( "config.ls", "CnvGSAInput", function(obj, value){ obj@config.ls <- value } )
setGeneric( "params.ls", function(obj) standardGeneric("params.ls") )
setGeneric( "params.ls<-", function(obj, value) standardGeneric("params.ls<-") )
setMethod( "params.ls", "CnvGSAInput", function(obj){ obj@params.ls } )
setReplaceMethod( "params.ls", "CnvGSAInput", function(obj, value){ obj@params.ls <- value } )
setGeneric( "cnvData.ls", function(obj) standardGeneric("cnvData.ls") )
setGeneric( "cnvData.ls<-", function(obj, value) standardGeneric("cnvData.ls<-") )
setMethod( "cnvData.ls", "CnvGSAInput", function(obj){ obj@cnvData.ls } )
setReplaceMethod( "cnvData.ls", "CnvGSAInput", function(obj, value){ obj@cnvData.ls <- value } )
setGeneric( "phData.ls", function(obj) standardGeneric("phData.ls") )
setGeneric( "phData.ls<-", function(obj, value) standardGeneric("phData.ls<-") )
setMethod( "phData.ls", "CnvGSAInput", function(obj){ obj@phData.ls } )
setReplaceMethod( "phData.ls", "CnvGSAInput", function(obj, value){ obj@phData.ls <- value } )
setGeneric( "gsData.ls", function(obj) standardGeneric("gsData.ls") )
setGeneric( "gsData.ls<-", function(obj, value) standardGeneric("gsData.ls<-") )
setMethod( "gsData.ls", "CnvGSAInput", function(obj){ obj@gsData.ls } )
setReplaceMethod( "gsData.ls", "CnvGSAInput", function(obj, value){ obj@gsData.ls <- value } )
setGeneric( "geneID.ls", function(obj) standardGeneric("geneID.ls") )
setGeneric( "geneID.ls<-", function(obj, value) standardGeneric("geneID.ls<-") )
setMethod( "geneID.ls", "CnvGSAInput", function(obj){ obj@geneID.ls } )
setReplaceMethod( "geneID.ls", "CnvGSAInput", function(obj, value){ obj@geneID.ls <- value } )
slotNames(CnvGSAInput)
cnvGSA.in <- CnvGSAInput()
slotNames(cnvGSA.in)
check("../../Desktop//cnvGSA")
remove.packages("cnvGSA")
library(devtools)
check("../../Desktop//cnvGSA")
library(cnvGSA)
check("../../Desktop//cnvGSA")
library(devtools)
check("../../Desktop//cnvGSA")
check("../../Desktop//cnvGSA")
check("../../Desktop//cnvGSA")
library(cnvGSA)
remove.packages("cnvGSA")
install("../../Desktop/cnvGSA/")
remove.packages("cnvGSA")
install("../../Desktop/cnvGSA/")
cnvGSA.in <- CnvGSAInput()
cnvGSA.in <- cnvGSAIn(configFile = "/Users/josephlugo/Documents/R/PGC2_test/R_Works/PGC2_config.txt",cnvGSA.in)
library(cnvGSA)
cnvGSA.in <- CnvGSAInput()
cnvGSA.in <- cnvGSAIn(configFile = "/Users/josephlugo/Documents/R/PGC2_test/R_Works/PGC2_config.txt",cnvGSA.in)
remove.packages("cnvGSA")
install("../../Desktop/cnvGSA/")
library(devtools)
install("../../Desktop/cnvGSA/")
library(cnvGSA.in)
library(cnvGSA)
cnvGSA.in <- CnvGSAInput()
cnvGSA.in <- cnvGSAIn(configFile = "/Users/josephlugo/Documents/R/PGC2_test/R_Works/PGC2_config.txt",cnvGSA.in)
remove.packages("cnvGSA")
remove.packages("cnvGSA")
install("../../Desktop/cnvGSA/")
library(devtools)
install("../../Desktop/cnvGSA/")
library(cnvGSA)
system.file("extdata","configFile.txt",package="cnvGSA")
system.file("inst/extdata","configFile.txt",package="cnvGSA")
system.file("extdata","configFile.txt",package="cnvGSA")
remove.packages("cnvGSA")
library(devtools)
install("../../Desktop//cnvGSA")
library(cnvGSA)
system.file("extdata","configFile.txt",package="cnvGSA")
library( "cnvGSAdata" )
cnvFile <- system.file( "extdata", "cnv_AGP_demo.txt", package="cnvGSAdata" )
geneIDFile <- system.file( "extdata", "gene_ID_demo.txt", package="cnvGSAdata" )
klLociFile <- system.file( "extdata", "kl_loci_AGP_demo.txt", package="cnvGSAdata" )
klGeneFile <- system.file( "extdata", "kl_gene_AGP_demo.txt", package="cnvGSAdata" )
phFile <- system.file( "extdata", "ph_AGP_demo.txt", package="cnvGSAdata" )
gsFile <- system.file( "extdata", "gs_data_demo.txt", package="cnvGSAdata" )
cnvGSA.in <- CnvGSAInput()
slotNames("CnvGSAInput")
data("cnvGSA_input_example")
ls()
class(cnvGSA.in)
slotNames(cnvGSA.in)
cnvGSA.out <- CnvGSAOutput()
data("cnvGSA_output_example")
ls()
slotNames(cnvGSA.out)
cnvFile <- system.file("extdata","cnv_AGP_demo.txt",package = "cnvGSAdata")
cnv.df <- read.table (cnvFile, header = T, sep = "\t", quote = "\"",
stringsAsFactors = F)
str(cnv.df,strict.width="cut")
str(cnvData.ls(cnvGSA.in),strict.width="cut")
kl_loci.df <- read.table (kl_lociFile, sep = "", header = T, comment.char = "",
quote = "\"", stringsAsFactors = F)
kl_loci.df <- read.table (klLociFile, sep = "", header = T, comment.char = "",
quote = "\"", stringsAsFactors = F)
str(kl_loci.df,strict.width="cut")
kl_gene.df <- read.table (klGeneFile, sep = "", header = T, comment.char = "",
quote = "\"", stringsAsFactors = F)
str(kl_gene.df,strict.width="cut")
ph.df <- read.table (phFile, header = T, sep = "\t", quote = "\"",
+ stringsAsFactors = F)
ph.df <- read.table (phFile, header = T, sep = "\t", quote = "\"",
stringsAsFactors = F)
str(ph.df)
str(cnvGSA.in@phData.ls,max.level=2,list.len=10)
data("gs_data_example")
str(gs_all.ls,max.level=1,list.len=5)
str(cnvGSA.in@gsData.ls,strict.width="cut",list.len = 10)
remove.packages("cnvGSAdata")
library(devtools)
install("../../Desktop/Pkg//cnvGSAdata")
remove.packages("cnvGSAdata")
install("../../Desktop/Pkg//cnvGSAdata")
library( "cnvGSA" )
library( "cnvGSAdata" )
phFile <- system.file( "extdata", "ph_AGP_demo.txt", package="cnvGSAdata" )
data("gs_data_example")
data("cnvGSA_input_example")
str(cnvGSA.in@gsData.ls,strict.width="cut",list.len = 10)
str( config.ls(cnvGSA.in) )
str( params.ls(cnvGSA.in) )
configFile <- system.file( "extdata", "configFile.txt", package="cnvGSA" )
data(cnvGSA_output_example)
str(cnvGSA.out@res.ls,max.level=1,list.len = 2)
str( cnvGSA.out@res.ls$covAll_chipAll_1_KLy.df )
gsTables.ls <- cnvGSA.out@gsTables.ls
gsTables.ls <- gsTables.ls(cnvGSA.out)
slotNames(cnvGSA.out)
config.df <- config.df(cnvGSA.out)
library(devtools)
getwd()
check("../../Desktop//cnvGSA")
remove.packages("cnvGSA")
remove.packages("cnvGSA")
check("../../Desktop//cnvGSA")
library(devtools)
check("../../Desktop//cnvGSA")
install("../../Desktop//cnvGSA")
library(cnvGSAdata)
data("cnvGSA_input_example")
params.ls <- params.ls(cnvGSA.in)
params.ls(cnvGSA.in) <- params.ls
data("cnvGSA_input_example")
params.ls(obj = Kl)
params.ls(obj = "Kl")
params.ls(obj = )
j <- list()
params.ls<-(cnvGSA.in,j)
params.ls<-(cnvGSA.in)
getwd()
kl_loci.df <- read.table ("/Users/josephlugo/Desktop/Data/cnvGSAdata/inst/extdata/kl_loci_AGP_demo.txt",  sep = "", header = T, comment.char = "", quote = "\"", stringsAsFactors = F)
View(kl_loci.df)
kl_loci.df$geneID <- NULL
View(kl_loci.df)
write.table (kl_loci.df, col.names=T, row.names=F, quote=F, sep="\t", file="kl_loci_AGP_demo.txt")
getwd()
kl_gene.df <- read.table ("/Users/josephlugo/Desktop/Data/cnvGSAdata/inst/extdata/kl_gene_AGP_demo.txt",  sep = "", header = T, comment.char = "", quote = "\"", stringsAsFactors = F)
kl_gene.df$Symbol <- NULL
write.table (kl_gene.df, col.names=T, row.names=F, quote=F, sep="\t", file="kl_gene_AGP_demo.txt")
remove.packages("cnvGSA")
library(devtools)
install("../../Desktop/cnvGSA/")
library(devtools)
install("../../Desktop/Pkg//cnvGSAdata")
library(cnvGSAdata)
data("cnvGSA_input_example")
config.df <- cnvGSA.in@config.ls$config.df
View(config.df)
data("cnvGSA_output_example")
kl_genefile <- system.file("extdata","kl_gene_AGP_demo.txt",package="cnvGSAdata")
kl_gene.df     <- read.table (kl_genefile, header = T, sep = "\t", quote = "\"", stringsAsFactors = F)
View(kl_gene.df)
gsFile <- system.file( "data", "gs_data_demo.txt", package="cnvGSAdata" )
gsFile <- system.file( "data", "gs_data_example.RData", package="cnvGSAdata" )
library(cnvGSAdata)
cnvGSA.in <- CnvGSAInput()
slotNames("CnvGSAInput")
data("cnvGSA_input_example")
ls()
class(cnvGSA.in)
slotNames(cnvGSA.in)
cnvGSA.out <- CnvGSAOutput()
data("cnvGSA_output_example")
ls()
slotNames(cnvGSA.out)
cnvFile <- system.file("extdata","cnv_AGP_demo.txt",package = "cnvGSAdata")
cnv.df <- read.table (cnvFile, header = T, sep = "\t", quote = "\"",
stringsAsFactors = F)
str(cnv.df,strict.width="cut")
str(cnvData.ls(cnvGSA.in),strict.width="cut")
geneIDFile <- system.file( "extdata", "gene_ID_demo.txt", package="cnvGSAdata" )
klLociFile <- system.file("extdata","kl_loci_AGP_demo.txt",package = "cnvGSAdata")
kl_loci.df <- read.table (klLociFile, sep = "", header = T, comment.char = "",
quote = "\"", stringsAsFactors = F)
str(kl_loci.df,strict.width="cut")
klGeneFile <- system.file("extdata","kl_gene_AGP_demo.txt",package = "cnvGSAdata")
kl_gene.df <- read.table (klGeneFile, sep = "", header = T, comment.char = "",
quote = "\"", stringsAsFactors = F)
str(kl_gene.df,strict.width="cut")
phFile <- system.file("extdata","ph_AGP_demo.txt",package = "cnvGSAdata")
ph.df <- read.table (phFile, header = T, sep = "\t", quote = "\"",
stringsAsFactors = F)
str(ph.df)
str(cnvGSA.in@phData.ls,max.level=2,list.len=10)
data("gs_data_example")
str(gs_all.ls,max.level=1,list.len=5)
str(gsid2name.chv)
gsFile <- system.file( "data", "gs_data_example.RData", package="cnvGSAdata" )
str(cnvGSA.in@gsData.ls,strict.width="cut",list.len = 10)
str( config.ls(cnvGSA.in) )
str( params.ls(cnvGSA.in) )
configFile <- system.file( "extdata", "configFile.txt", package="cnvGSA" )
str(cnvGSA.out@res.ls,max.level=1,list.len = 2)
str( cnvGSA.out@res.ls$covAll_chipAll_1_KLy.df )
str( gsTables.ls, max.level=1, list.len=5 )
str( gsTables.ls(cnvGSA.out), max.level=1, list.len=5 )
str(gsTables.ls[[2]],strict.width="cut",max.level=2)
gsTables.ls <- gsTables.ls(cnvGSA.in)
gsTables.ls <- gsTables.ls(cnvGSA.out)
str(gsTables.ls[[2]],strict.width="cut",max.level=2)
remove.packages("cnvGSA")
library(devtools)
setwd("../../Desktop//cnvGSA//man")
document()
remove.packages("cnvGSA")
install("../../cnvGSA/")
